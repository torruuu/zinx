---
import MediaBg from '@/components/common/MediaBg.vue'
import PlayButton from '@/components/common/PlayButton.vue'
import {
  getHours,
  getRestMinutes,
  getYear,
  concatStrings,
} from '@/composables/extractMediaData'
import { getLangFromUrl, useTranslations } from '@/i18n/utils'
import type { DetailedMovie, DetailedTv } from '@/types/index'

interface Props {
  mediaData: DetailedMovie & DetailedTv
}

const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

const imageApi = import.meta.env.PUBLIC_API_IMAGES
const { mediaData } = Astro.props
const mediaDuration = mediaData.runtime
  ? `${getHours(mediaData.runtime)} ${t('media-detail.hours')} ${getRestMinutes(mediaData.runtime)} ${t('media-detail.minutes')}`
  : `${mediaData.number_of_seasons} ${mediaData.number_of_seasons === 1 ? t('media-detail.season') : t('media-detail.seasons')}`
const mediaAbout = concatStrings(
  ...[mediaDuration, getYear(mediaData.release_date || '')],
)
---

<section class="media-header">
  <div class="media-header__content">
    <MediaBg
      mediaBg={mediaData.backdrop_path || ''}
      mediaPoster={mediaData.poster_path || ''}
      client:load
    />
    <div class="media-header__description">
      <h2 class="media-header__title">{mediaData.name || mediaData.title}</h2>
      <div class="media-header__details">
        <div class="media-header__genres">
          {
            mediaData.genres.map((genre) => (
              <span class="media-header__genre">{genre.name}</span>
            ))
          }
        </div>
        <div class="media-header__about">
          <span>{mediaAbout}</span>
        </div>
      </div>
      <div class="media-header__play">
        <PlayButton>
          {t('button.trailer')}
        </PlayButton>
      </div>
    </div>
    <div transition:name={`poster-${mediaData.id}`} class="media-header__poster">
      <img
        src=`${imageApi}original${mediaData.poster_path}`
        alt={mediaData.name || mediaData.title}
      />
    </div>
  </div>
</section>

<style lang="scss">
  .media-header {
    height: 100vh;
    padding: map-get($map: $sizes, $key: s-general-padding);
    padding-bottom: 3rem;
    @include flex($direction: column, $justify-content: flex-end);
    &__content {
      width: 100%;
      display: grid;
      grid-template-columns: 1fr 1fr;
    }
    &__description {
      @include flex(
        $direction: column,
        $justify-content: flex-start,
        $align-items: flex-start
      );
      gap: 1rem;
    }
    &__title {
      font-size: map-get($map: $font-size, $key: fs-extra-big);
      font-family: map-get($map: $fonts, $key: f-font-light);
      @include responsive() {
        font-size: map-get($map: $font-size, $key: fs-big);
      }
    }
    &__poster {
      @include flex($justify-content: flex-end);
      & > img {
        border-radius: map-get($map: $sizes, $key: s-slide-radius);
        width: 11.25rem;
        height: 16.875rem;
      }
    }
    &__genres {
      @include genres();
    }
    &__genre {
      color: map-get($map: $colors, $key: c-dark-gray);
      @include responsive() {
        font-size: map-get($map: $font-size, $key: fs-super-small);
      }
    }
    @include responsive() {
      padding: map-get($map: $sizes, $key: s-general-padding-mobile);
      padding-bottom: 3rem;
    }
  }
</style>
